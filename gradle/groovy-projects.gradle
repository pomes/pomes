import com.github.pomes.gradle.distdocs.DistDocsPlugin
import com.github.pomes.gradle.projectinfo.ProjectInfoPlugin
import com.github.pomes.gradle.releaseme.IShallBeReleasedPlugin

import static com.github.pomes.gradle.projectinfo.ProjectInfoPlugin.determineMavenVersion
import static org.gradle.api.plugins.BasePlugin.BUILD_GROUP
import static org.gradle.api.plugins.JavaBasePlugin.CHECK_TASK_NAME

configure(subprojects.findAll { it.plugins.hasPlugin('groovy') }) {
    apply plugin: 'build-dashboard'
    apply plugin: 'project-report'
    apply plugin: 'jacoco'
    apply from: "$rootProject.projectDir/gradle/codenarc.gradle"
    apply plugin: DistDocsPlugin
    apply plugin: ProjectInfoPlugin

    sourceCompatibility = 1.8

    dependencies {
        compile "org.codehaus.groovy:groovy-all:$groovyVersion"
        testCompile "org.spockframework:spock-core:$spockVersion"
    }

    publishing {
        publications {
            mavenLibrary(MavenPublication) {
                from components.java
                artifact tasks.groovydocJar
                artifact tasks.sourcesJar
                version ProjectInfoPlugin.determineMavenVersion(rootProject.file('VERSION').text)
                pom.withXml {
                    project.ext.pom.each { n ->
                        asNode().append n
                    }
                }
            }
        }
    }

    artifactoryPublish {
        publications('mavenLibrary')
    }

    project.tasks.getByName('publish').dependsOn ProjectInfoPlugin.GENERATE_PROJECT_INFO_TASK_NAME

    bintray {
        user = rootProject.ext.secrets.bintrayUser
        key = rootProject.ext.secrets.bintrayKey
        publications = ['mavenLibrary']
        pkg {
            userOrg = 'pomes'
            repo = 'pomes'
            name = project.name
            labels = ['maven', 'aether', 'groovy']
            version {
                name = determineMavenVersion(project.version)
                vcsTag = "${IShallBeReleasedPlugin.DEFAULT_RELEASE_TAG_PREFIX}${project.version}"
            }
        }
    }

    tasks.whenTaskAdded { task ->
        if (task.name == 'generatePomFileForMavenLibraryPublication') {
            task.dependsOn ProjectInfoPlugin.CONFIGURE_POM_TASK_NAME
        }
    }

    task preReleaseGroovyChecks() {
        group 'release'
        dependsOn 'assemble'
    }

    rootProject.tasks.getByName('checkReleaseStatus').dependsOn preReleaseGroovyChecks

    //This seems to not push the released version properly - need to manually run after(?)
    //rootProject.tasks.getByName('performRelease').finalizedBy 'artifactoryPublish', 'bintrayUpload'
}

project(':pomes-core') {
    description = 'Core library for Pomes'

    dependencies {
        compile "org.eclipse.aether:aether-api:$aetherVersion"
        compile "org.eclipse.aether:aether-util:$aetherVersion"
        compile "org.eclipse.aether:aether-impl:$aetherVersion"
        compile "org.eclipse.aether:aether-connector-basic:$aetherVersion"
        compile "org.eclipse.aether:aether-transport-file:$aetherVersion"
        compile "org.eclipse.aether:aether-transport-http:$aetherVersion"
        compile "org.eclipse.aether:aether-transport-wagon:$aetherVersion"
        compile 'org.apache.maven.wagon:wagon-ssh:1.0'
        compile "org.apache.maven:maven-aether-provider:$mavenVersion"
        compile "org.apache.maven:maven:$mavenVersion"
        compile 'org.apache.maven:maven-project:2.2.1'

        compile 'org.glassfish.jersey.core:jersey-client:2.22.1'
        compile 'org.jsoup:jsoup:1.9.1'
        compile dependencyLogging

        testCompile 'co.freeside:betamax:1.1.2'
    }
}

project(':pomes-util') {
    description = 'Utility library for Pomes'
}

project(':pomes-cli') {
    description = 'The command line tool for Pomes'

    apply plugin: 'application'
    mainClassName = 'com.github.pomes.cli.App'

    dependencies {
        compile project(':pomes-core')
        compile 'com.beust:jcommander:1.48'
        compile dependencyLogging
        compile 'org.yaml:snakeyaml:1.17'
    }

    task createDistributionDocs(dependsOn: ProjectInfoPlugin.GENERATE_PROJECT_INFO_TASK_NAME) {
        def docs = file("$buildDir/distributionDocs")
        outputs.dir docs
        doLast {
            docs.mkdirs()
            Reader reader = releaseme.gitHub.renderMarkdown(file("$project.rootDir/README.md").text)
            new File(docs, "project.yaml").write(project.ext.projectInfo.toYaml())
            new File(docs, "README.HTML").write(reader.text)
        }
    }

    distributions {
        main {
            contents {
                from {
                    ["$project.rootDir/LICENSE",
                     "$project.rootDir/README.md"]
                }
                from(createDistributionDocs)
            }
        }
    }

    tasks.whenTaskAdded { task ->
        if (task.name.equals('assembleDist')) {
            task.dependsOn(ProjectInfoPlugin.GENERATE_PROJECT_INFO_TASK_NAME)
        }
    }

    rootProject.tasks.getByName(IShallBeReleasedPlugin.CHECK_RELEASE_STATUS_TASK_NAME)
            .dependsOn(project.tasks.getByPath(BUILD_GROUP), project.tasks.getByPath(CHECK_TASK_NAME))

    task updateVersion() {
        description 'Updates the Version.properties file'
        File versionPropFile = file('src/main/resources/com/github/pomes/cli/Version.properties')
        outputs.file versionPropFile
        File versionFile = project.rootProject.file('VERSION')
        inputs.file versionFile
        doLast {
            versionPropFile.text = "version=${versionFile.text}"
        }
    }
    //compileGroovy.dependsOn updateVersion
    rootProject.tasks.getByName('configureVersionFile').finalizedBy updateVersion
}

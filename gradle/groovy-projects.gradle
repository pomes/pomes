import com.github.pomes.gradle.releaseme.IShallBeReleasedPlugin

configure(subprojects.findAll { it.name in groovyProjects }) {
    buildscript {
        dependencies {
            //classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0"
        }
    }
    apply plugin: 'groovy'
    apply plugin: 'build-dashboard'
    apply plugin: 'project-report'
    apply plugin: 'jacoco'

    apply plugin: IShallBeReleasedPlugin

    apply plugin: 'maven-publish'
    //apply plugin: 'com.jfrog.bintray'
    //apply plugin: 'com.jfrog.artifactory'

    sourceCompatibility = 1.8

    dependencies {
        compile "org.codehaus.groovy:groovy-all:$groovyVersion"
        testCompile "org.spockframework:spock-core:$spockVersion"
    }

    apply from: "$rootProject.projectDir/gradle/codenarc.gradle"

    releaseme {
        releaseProject = true
        bintrayRelease = true
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifact tasks.groovydocJar
                artifact tasks.sourcesJar
                version IShallBeReleasedPlugin.determineMavenVersion(project.version)
                pom.withXml {
                    releaseme.pom.each { n ->
                        asNode().append n
                    }
                }
            }
        }
    }


    tasks.whenTaskAdded { task ->
        if (task.name.equals('generatePomFileForMavenPublication')) {
            task.dependsOn(IShallBeReleasedPlugin.CONFIGURE_POM_TASK_NAME)
        }
    }

    if (project.plugins.hasPlugin('com.jfrog.artifactory')) {
        artifactory {
            contextUrl = 'https://oss.jfrog.org/artifactory/'
            publish {
                repository {
                    repoKey = 'oss-snapshot-local'
                    username = rootProject.ext.secrets.bintrayUser
                    password = rootProject.ext.secrets.bintrayKey
                }
                defaults {
                    publications('maven')
                }
            }
        }
    }

/*
    bintray {
        user = rootProject.ext.secrets.bintrayUser
        key = rootProject.ext.secrets.bintrayKey
        pkg {
            repo = 'pomes'
            userOrg = 'pomes'
            //issueTrackerUrl = project.ext.basePom.issueManagement[0].url[0].value()
            labels = ['maven', 'aether', 'groovy']
        }
    }
    */

}

project(':pomes-core') {
    description = 'Core library for Pomes'

    dependencies {
        compile "org.eclipse.aether:aether-api:$aetherVersion"
        compile "org.eclipse.aether:aether-util:$aetherVersion"
        compile "org.eclipse.aether:aether-impl:$aetherVersion"
        compile "org.eclipse.aether:aether-connector-basic:$aetherVersion"
        compile "org.eclipse.aether:aether-transport-file:$aetherVersion"
        compile "org.eclipse.aether:aether-transport-http:$aetherVersion"
        compile "org.eclipse.aether:aether-transport-wagon:$aetherVersion"
        compile 'org.apache.maven.wagon:wagon-ssh:1.0'
        compile "org.apache.maven:maven-aether-provider:$mavenVersion"
        compile "org.apache.maven:maven:$mavenVersion"
        compile 'org.apache.maven:maven-project:2.2.1'

        compile 'org.glassfish.jersey.core:jersey-client:2.22.1'
        compile 'org.jsoup:jsoup:1.9.1'
        compile dependencyLogging

        testCompile 'co.freeside:betamax:1.1.2'
    }
}

project(':pomes-util') {
    description = 'Utility library for Pomes'
}

project(':pomes-cli') {
    description = 'The command line tool for Pomes'

    apply plugin: 'application'
    mainClassName = 'com.github.pomes.cli.App'

    releaseme {
        githubRelease = true
    }

    task createDistributionDocs(dependsOn: IShallBeReleasedPlugin.GENERATE_PROJECT_INFO_TASK_NAME) {
        def docs = file("$buildDir/distributionDocs")
        outputs.dir docs
        doLast {
            docs.mkdirs()
            Reader reader = releaseme.gitHub.renderMarkdown(file("$project.rootDir/README.md").text)
            new File(docs, "project.yaml").write(releaseme.projectInfo.toYaml())
            new File(docs, "README.HTML").write(reader.text)
        }
    }

    distributions {
        main {
            contents {
                from {
                    ["$project.rootDir/LICENSE",
                    "$project.rootDir/README.md"]
                }
                from(createDistributionDocs)
            }
        }
    }

    tasks.whenTaskAdded { task ->
        if (task.name.equals('assembleDist')) {
            task.dependsOn(IShallBeReleasedPlugin.GENERATE_PROJECT_INFO_TASK_NAME)
        }
    }

    dependencies {
        compile project(':pomes-core')
        compile 'com.beust:jcommander:1.48'
        compile dependencyLogging
        compile 'org.yaml:snakeyaml:1.17'
    }

    task updateVersion(dependsOn: IShallBeReleasedPlugin.CONFIGURE_VERSION_FILE_TASK_NAME) {
        description 'Updates the Version.properties file'
        File versionPropFile = file('src/main/resources/com/github/pomes/cli/Version.properties')
        File versionFile = project.rootProject.file('VERSION')
        outputs.file versionPropFile
        inputs.file versionFile
        doLast {
            versionPropFile.text = "version=${versionFile.text}"
        }
    }
    compileGroovy.dependsOn updateVersion
}

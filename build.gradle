import groovy.json.JsonOutput

import java.time.LocalDateTime

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.3.0"
    }
}

plugins {
    id 'idea'
    id 'eclipse'
}

description = 'Base project for Pomes'

task publishAll(dependsOn: ['pomes-core:artifactoryPublish',
                            'pomes-util:artifactoryPublish',
                            'pomes-cli:artifactoryPublish']) {}

allprojects {
    repositories {
        jcenter()
    }

    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'

    ext {
        groovyVersion = '2.4.6'
        spockVersion = '1.0-groovy-2.4'
        codeNarcVersion = '0.25.1'
        gradleVersion = '2.13'
        secrets = getSecrets()
    }

    wrapper.gradleVersion = gradleVersion

}

configure(subprojects.findAll { it.name in ['pomes-core', 'pomes-cli', 'pomes-util'] }) {
    apply plugin: 'groovy'
    apply plugin: 'build-dashboard'
    apply plugin: 'project-report'
    apply plugin: 'jacoco'


    sourceCompatibility = 1.8

    group = 'com.github.pomes'
    version = '0.1.0-SNAPSHOT'
    status = 'SNAPSHOT'



    project.ext.basePom = new NodeBuilder().pom {
        name project.name
        description project.description
        url 'https://github.com/pomes/pomes'
        inceptionYear '2016'
        scm {
            url 'https://github.com/pomes/pomes.git'
            connection 'scm:git:https://github.com/pomes/pomes.git'
            developerConnection 'scm:git:https://github.com/pomes/pomes.git'
        }
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        issueManagement {
            system 'GitHub'
            url 'https://github.com/pomes/pomes/issues'
        }

        ciManagement {
            system 'TravisCI'
            url 'https://travis-ci.org/pomes/pomes'
        }
        developers {
            developer {
                id 'dedickinson'
                name 'Duncan Dickinson'
                email 'duncan@dickinson.name'
                url 'http://www.duncan.dickinson.name'
            }
        }
    }


    dependencies {
        compile "org.codehaus.groovy:groovy-all:$groovyVersion"
        testCompile "org.spockframework:spock-core:$spockVersion"
    }

    apply from: "$rootProject.projectDir/gradle/codenarc.gradle"

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task groovydocJar(type: Jar, dependsOn: groovydoc) {
        classifier = 'javadoc'
        from groovydoc.destinationDir
    }

    def bintrayInfoFileName = 'bintray-descriptor.bintray-info.json'

    task createBintrayInfoFile() {
        File outputFile = new File("$projectDir/$bintrayInfoFileName")
        outputs.file outputFile
        def pom = project.ext.basePom
        //See: https://bintray.com/docs/api/#_create_package
        Map info = [
                package: [
                        name                   : project.name,
                        repo                   : 'pomes/pomes',
                        //subject                : "eyalbr",
                        desc                   : description,
                        website_url            : pom.url[0].value(),
                        issue_tracker_url      : pom.issueManagement[0].url[0].value(),
                        vcs_url                : 'https://github.com/pomes/pomes.git',
                        github_repo            : 'pomes/pomes',
                        licenses               : ['Apache-2.0'],
                        labels                 : ['maven', 'aether', 'groovy'],
                        public_download_numbers: true,
                        public_stats           : false
                ],
                version: [
                        name    : project.version,
                        released: LocalDateTime.now().toString(),
                        gpgSign : false
                ],
                publish: true
        ]
        outputFile.write(JsonOutput.prettyPrint(JsonOutput.toJson(info)))
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact groovydocJar

                artifact("$projectDir/$bintrayInfoFileName") {
                    extension "bintray-info.json"
                }

                pom.withXml {
                    project.ext.basePom.each { n ->
                        asNode().append n
                    }
                }
            }
        }
    }

    artifactory {
        //See: https://www.jfrog.com/confluence/display/RTF/Gradle+Artifactory+Plugin
        //See: https://artifactory.jfrog.org/confluence/display/RTF/Deploying+Snapshots+to+oss.jfrog.org#DeployingSnapshotstooss.jfrog.org-WorkingwithOJO
        contextUrl = 'https://oss.jfrog.org/artifactory/'
        publish {
            repository {
                repoKey = 'oss-snapshot-local' // The Artifactory repository key to publish to
                username = ext.secrets.artifactoryUser // The publisher user name
                password = ext.secrets.artifactoryPassword // The publisher password
                maven = true
            }
            defaults {
                publications('mavenJava')
            }
        }
    }
}

Properties getSecrets() {
    def props = new Properties()

    file("${rootDir.absolutePath}/secrets.properties").withInputStream { stream ->
        props.load(stream)
    }
    return props
}
